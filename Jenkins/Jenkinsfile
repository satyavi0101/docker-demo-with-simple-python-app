pipeline {
  agent any

  environment {
    AWS_REGION = 'us-east-1'                     // change if needed
    APP_NAME = 'my-web-app'                      // change if needed
    DOCKER_SOURCE_REPO = 'https://github.com/satyavi0101/docker-demo-with-simple-python-app.git' // your app repo
    AWS_CREDENTIALS_ID = 'aws-ecr-creds-id'      // Update with your Jenkins AWS Credentials ID
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Terraform Init & Apply') {
      steps {
        script {
          // Use withCredentials to inject AWS credentials
          withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: env.AWS_CREDENTIALS_ID]]) {
            dir('infrastructure') {
              echo 'üëâ Checking Terraform version'
              sh 'terraform --version'
              echo 'üöÄ Running terraform init'
              sh 'terraform init -input=false'
              echo '‚öôÔ∏è Running terraform apply'
              sh 'terraform apply -auto-approve'
              // Capture ECR repo URL output from Terraform
              script {
                env.ECR_REPO = sh(script: 'terraform output -raw ecr_repository_url', returnStdout: true).trim()
                echo "ECR Repository URL: ${env.ECR_REPO}"
              }
            }
          }
        }
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        dir('') { // root dir with Dockerfile (adjust if needed)
          script {
            docker.withRegistry("https://${env.ECR_REPO}", env.AWS_CREDENTIALS_ID) {
              def image = docker.build("${env.ECR_REPO}:latest")
              image.push()
            }
          }
        }
      }
    }

    stage('Deploy ECS Service') {
      steps {
        dir('infrastructure') {
          echo 'üîÑ Re-applying Terraform to update ECS service'
          sh 'terraform apply -auto-approve'
        }
      }
    }
  }

  post {
    success {
      echo "‚úÖ Deployment completed successfully!"
    }
    failure {
      echo "‚ùå Deployment failed. Check logs for details."
    }
  }
}
